Organiza las rutas en módulos separados. Por ejemplo:

Archivo routes/auth.py:


from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required, current_user
from models import User
from database import db
import logging

logger = logging.getLogger(__name__)
auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    # Lógica de registro (igual a la actual)
    pass

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    # Lógica de inicio de sesión (igual a la actual)
    pass

@auth_bp.route('/logout')
@login_required
def logout():
    # Lógica de cierre de sesión (igual a la actual)
    pass

Archivo routes/api.py:

python
Copiar código
from flask import Blueprint, jsonify, request
from datetime import datetime, timedelta
from models import Articulo, Evento, Categoria, Subcategoria, articulo_evento
from database import db
import logging

logger = logging.getLogger(__name__)
api_bp = Blueprint('api', __name__)

@api_bp.route('/api/articles')
def get_articles():
    # Lógica de la ruta `/api/articles` (igual a la actual)
    pass

@api_bp.route('/api/mapa-data')
def get_mapa_data():
    # Lógica de la ruta `/api/mapa-data` (igual a la actual)
    pass
Archivo routes/views.py:

python
Copiar código
from flask import Blueprint, render_template, request, flash
from models import Categoria, Subcategoria, Evento, Articulo
from database import db
import logging

logger = logging.getLogger(__name__)
views_bp = Blueprint('views', __name__)

@views_bp.route('/')
def index():
    # Lógica de la ruta `/` (igual a la actual)
    pass

@views_bp.route('/mapa')
def mapa():
    # Lógica de la ruta `/mapa` (igual a la actual)
    pass
5. Registro de blueprints
En el archivo principal:

python
Copiar código
from routes.auth import auth_bp
from routes.api import api_bp
from routes.views import views_bp

app = create_app()

# Registrar blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(api_bp)
app.register_blueprint(views_bp)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
6. Mejoras en lógica redundante
Revisa rutas como /api/articles para simplificar el manejo de categorías y subcategorías:

python
Copiar código
if category_id or subcategory_id:
    if category_id:
        query = query.filter(Categoria.categoria_id == category_id)
    if subcategory_id:
        query = query.filter(Subcategoria.subcategoria_id == subcategory_id)
else:
    logger.warning("Category or subcategory ID is required")
    return jsonify({'error': 'Invalid filters'}), 400