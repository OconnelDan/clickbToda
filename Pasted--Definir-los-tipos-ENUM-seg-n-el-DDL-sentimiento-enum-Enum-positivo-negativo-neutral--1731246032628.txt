
# Definir los tipos ENUM seg√∫n el DDL
sentimiento_enum = Enum('positivo', 'negativo', 'neutral', name='sentimiento_enum', schema='app')
agencia_enum = Enum('Reuters', 'EFE', 'Otro', name='agencia_enum', schema='app')

# Clases ajustadas

class Categoria(Base):
    __tablename__ = 'categoria'
    __table_args__ = {'schema': 'app'}
    
    categoria_id = Column(Integer, primary_key=True)
    nombre = Column(String(255), nullable=False)
    descripcion = Column(Text)
    
    subcategorias = relationship('Subcategoria', backref='categoria', lazy=True)

class Subcategoria(Base):
    __tablename__ = 'subcategoria'
    __table_args__ = {'schema': 'app'}
    
    subcategoria_id = Column(Integer, primary_key=True)
    nombre = Column(String(255), nullable=False)
    descripcion = Column(Text)
    categoria_id = Column(Integer, ForeignKey('app.categoria.categoria_id'), nullable=False)
        # Nuevos campos
    palabras_clave = Column(Text, nullable=True)  # Puede almacenar palabras clave como texto
    palabras_clave_embeddings = Column(Text, nullable=True)  # Embeddings en formato texto
    
    
    eventos = relationship('Evento', backref='subcategoria', lazy=True)

class Ideologia(Base):
    __tablename__ = 'ideologia'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    ideologia_id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(50), nullable=False)
    
    periodicos = relationship('Periodico', back_populates='ideologia')
    articulos = relationship('Articulo', back_populates='ideologia')

class Region(Base):
    __tablename__ = 'region'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    region_id = Column(Integer, primary_key=True, autoincrement=True)
    region_nombre = Column(String(255), nullable=False)
    pais_iso_code = Column(String(2), nullable=True)
    ISO31662_subdivision_code = Column(String, nullable=True)
    pais_nombre = Column(String, nullable=True)
    
    eventos = relationship('EventoRegion', back_populates='region')

class Evento(Base):
    __tablename__ = 'evento'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    evento_id = Column(Integer, primary_key=True, autoincrement=True)
    titulo = Column(String(255), nullable=False)
    descripcion = Column(Text, nullable=True)
    fecha_evento = Column(Date, nullable=True)
    impacto = Column(String(255), nullable=True)
    subcategoria_id = Column(Integer, ForeignKey('app.subcategoria.subcategoria_id'), nullable=False)
    gpt_sujeto_activo = Column(String(255), nullable=True)
    gpt_sujeto_pasivo = Column(String(255), nullable=True)
    gpt_importancia = Column(Integer, nullable=True)
    gpt_tiene_contexto = Column(Boolean, default=False)
    embeddings = Column(String, nullable=True)
    gpt_palabras_clave = Column(String(1000), nullable=True)  # Added field
    
    regiones = relationship('EventoRegion', back_populates='evento')
    articulos_relacionados = relationship('ArticuloEvento', back_populates='evento')
    opiniones_de_influencer = relationship('InfluencerOpinion', back_populates='evento')
    user_logs = relationship('UserLog', back_populates='evento')

class EventoRegion(Base):
    __tablename__ = 'evento_region'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    evento_id = Column(Integer, ForeignKey('app.evento.evento_id'), primary_key=True)
    region_id = Column(Integer, ForeignKey('app.region.region_id'), primary_key=True)
    
    evento = relationship('Evento', back_populates='regiones')
    region = relationship('Region', back_populates='eventos')

class Periodista(Base):
    __tablename__ = 'periodista'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    periodista_id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(255), nullable=False)
    apellido = Column(String(255), nullable=False)
    email = Column(String(255), nullable=True)
    telefono = Column(String(50), nullable=True)
    biografia = Column(Text, nullable=True)
    fecha_nacimiento = Column(Date, nullable=True)
    nacionalidad = Column(String(255), nullable=True)
    foto = Column(String(255), nullable=True)
    
    articulos = relationship('Articulo', back_populates='periodista')

class Periodico(Base):
    __tablename__ = 'periodico'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    periodico_id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(255), nullable=False)
    pais_iso_code = Column(String(2), nullable=True)
    idioma = Column(String(50), nullable=True)
    sitio_web = Column(String(255), nullable=True)
    logo_url = Column(String(255), nullable=True)
    tipo = Column(String(50), nullable=True)
    circulacion = Column(Integer, nullable=True)
    suscriptores = Column(Integer, nullable=True)
    ideologia_id = Column(Integer, ForeignKey('app.ideologia.ideologia_id'), nullable=True)
    
    ideologia = relationship('Ideologia', back_populates='periodicos')
    articulos = relationship('Articulo', back_populates='periodico')

class Articulo(Base):
    __tablename__ = 'articulo'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    articulo_id = Column(Integer, primary_key=True, autoincrement=True)
    titular = Column(String(1000), nullable=False)
    subtitular = Column(Text, nullable=True)
    cuerpo = Column(Text, nullable=True)
    gpt_palabras_clave = Column(String(1000), nullable=True)
    numero_de_palabras = Column(Integer, nullable=True)
    likes = Column(Integer, nullable=True)
    tipo = Column(String(50), nullable=False)
    url = Column(String(255), nullable=True)
    paywall = Column(Boolean, nullable=True, default=False)
    fecha_publicacion = Column(Date, nullable=True)
    updated_on = Column(TIMESTAMP, nullable=True)
    periodico_id = Column(Integer, ForeignKey('app.periodico.periodico_id'), nullable=False)
    periodista_id = Column(Integer, ForeignKey('app.periodista.periodista_id'), nullable=True)
    ideologia_id = Column(Integer, ForeignKey('app.ideologia.ideologia_id'), nullable=True)
    gpt_titular = Column(String(1000), nullable=True)
    gpt_sentimiento = Column(sentimiento_enum, nullable=True, default='neutral')
    gpt_titular_clickbait = Column(Boolean, nullable=True, default=False)
    agencia = Column(agencia_enum, nullable=True)
    gpt_importancia = Column(Integer, nullable=True)
    gpt_cantidad_fuentes_citadas = Column(Integer, nullable=True)
    gpt_opinion = Column(String, nullable=True)
    gpt_resumen = Column(String, nullable=True)
    palabras_clave_embeddings = Column(String, nullable=True)
    embeddings = Column(String, nullable=True)
    
    ideologia = relationship('Ideologia', back_populates='articulos')
    periodico = relationship('Periodico', back_populates='articulos')
    periodista = relationship('Periodista', back_populates='articulos')
    eventos_relacionados = relationship('ArticuloEvento', back_populates='articulo')
    influencer_menciones = relationship('ArticuloInfluencerMencion', back_populates='articulo')
    user_logs = relationship('UserLog', back_populates='articulo')

class ArticuloEvento(Base):
    __tablename__ = 'articulo_evento'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    articulo_id = Column(Integer, ForeignKey('app.articulo.articulo_id'), primary_key=True)
    evento_id = Column(Integer, ForeignKey('app.evento.evento_id'), primary_key=True)
    cluster_id = Column(Integer, nullable=True)
    cluster_descripcion = Column(String(255), nullable=True)
    
    articulo = relationship('Articulo', back_populates='eventos_relacionados')
    evento = relationship('Evento', back_populates='articulos_relacionados')

class Influencer(Base):
    __tablename__ = 'influencer'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    influencer_id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(255), nullable=False)
    plataforma = Column(String(255), nullable=True)
    username = Column(String(255), nullable=True)
    seguidores = Column(Integer, nullable=True)
    url = Column(String(255), nullable=True)
    
    opiniones = relationship('InfluencerOpinion', back_populates='influencer')
    articulos_mencionados = relationship('ArticuloInfluencerMencion', back_populates='influencer')

class InfluencerOpinion(Base):
    __tablename__ = 'influencer_opinion'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    opinion_id = Column(Integer, primary_key=True, autoincrement=True)
    influencer_id = Column(Integer, ForeignKey('app.influencer.influencer_id'), nullable=False)
    evento_id = Column(Integer, ForeignKey('app.evento.evento_id'), nullable=False)
    contenido = Column(Text, nullable=True)
    fecha_publicacion = Column(TIMESTAMP, nullable=True, default=func.now())
    url = Column(String(255), nullable=True)
    
    influencer = relationship('Influencer', back_populates='opiniones')
    evento = relationship('Evento', back_populates='opiniones_de_influencer')

class ArticuloInfluencerMencion(Base):
    __tablename__ = 'articulo_influencer_mencion'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    articulo_id = Column(Integer, ForeignKey('app.articulo.articulo_id'), primary_key=True)
    influencer_id = Column(Integer, ForeignKey('app.influencer.influencer_id'), primary_key=True)
    fecha_mencion = Column(TIMESTAMP, nullable=True, default=func.now())
    plataforma = Column(String(255), nullable=True)
    url = Column(String(255), nullable=True)
    
    articulo = relationship('Articulo', back_populates='influencer_menciones')
    influencer = relationship('Influencer', back_populates='articulos_mencionados')

class User(Base):
    __tablename__ = 'USER'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    user_id = Column(Integer, primary_key=True, autoincrement=True)
    nombre = Column(String(255), nullable=False)
    email = Column(String(255), nullable=False, unique=True)
    is_admin = Column(Boolean, nullable=True, default=False)
    es_suscriptor = Column(Boolean, nullable=True, default=False)
    fin_fecha_suscripcion = Column(TIMESTAMP, nullable=True)
    status = Column(String(255), nullable=True)
    password_hash = Column(String(1000), nullable=True)  # Fix this line
    puntos = Column(Integer, nullable=True, default=0)  # Fix this line
    
    logs = relationship('UserLog', back_populates='user')

class UserLog(Base):
    __tablename__ = 'user_log'
    __table_args__ = {'schema': 'app', 'extend_existing': True}
    
    log_id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('app.USER.user_id'), nullable=True)
    timestamp = Column('timestamp', TIMESTAMP, nullable=True, default=func.now())
    articulo_id = Column(Integer, ForeignKey('app.articulo.articulo_id'), nullable=True)
    evento_id = Column(Integer, ForeignKey('app.evento.evento_id'), nullable=True)
    tipo = Column(String(50), nullable=True)
    ip = Column(String(50), nullable=True)
    navegador = Column(String(255), nullable=True)
    puntos_otorgados = Column(Integer, nullable=True, default=0)
    
    user = relationship('User', back_populates='logs')
    articulo = relationship('Articulo', back_populates='user_logs')
    evento = relationship('Evento', back_populates='user_logs')
